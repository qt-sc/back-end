/*
 * zhihu_caffe
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 0.1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
// package swagger

package service

import (
	"encoding/json"
	"fmt"
	"github.com/qt-sc/server/conf"
	"github.com/qt-sc/server/lib"
	"log"
	"net/http"
	"strconv"
	"time"
)

func DeleteUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func GetSignupPage(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func GetUserInfo(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func GetUserPage(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func GetUsers(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	alluser, err := dbServer.GetAllUser()
	if err != nil {
		fmt.Println("Fail to get user.")
		w.WriteHeader(http.StatusNotFound)
		return
	}

	msg, err := json.Marshal(alluser)
	if err != nil {
		fmt.Println("JSON Marshal fail.")
		w.WriteHeader(http.StatusNotFound)
		return
	}
	w.WriteHeader(http.StatusOK)
	w.Write(msg)
}

func UpdateUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func UserLogin(w http.ResponseWriter, r *http.Request) {
	// 登录相关的鉴权逻辑
	r.ParseForm()
	id := r.PostFormValue("id")
	username := r.PostFormValue("name")
	userId, err := strconv.Atoi(id)
	if err != nil {
		log.Printf("类型转换错误")
	}

	userTemp := lib.UserInfo{
		Username: username,
		ID:       uint64(userId),
	}

	token, err := lib.CreateToken(&userTemp)

	if err != nil {
		log.Println("token生成错误")
	}

	conf.Redis.Set(token, userId, time.Hour*24)

	cookie1 := http.Cookie{
		Name: "username",
		Value:username,
		Path:"/",
		Expires:time.Now().AddDate(0, 0, 1),
	}

	cookie2 := http.Cookie{
		Name:       "id",
		Value:      id,
		Path:"/",
		Expires:    time.Now().AddDate(0, 0, 1),
	}

	cookie3 := http.Cookie{
		Name:"token",
		Value:token,
		Path:"/",
		Expires:    time.Now().AddDate(0, 0, 1),
	}

	w.Header().Set("Set-Cookie", cookie1.String())
	w.Header().Add("Set-Cookie", cookie2.String())
	w.Header().Add("Set-Cookie", cookie3.String())

	// TODO: 登录除鉴权相关的逻辑
}

func UserLogout(w http.ResponseWriter, r *http.Request) {
	//w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	//w.WriteHeader(http.StatusOK)
}

func UserSignup(w http.ResponseWriter, r *http.Request) {
	//w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	//w.WriteHeader(http.StatusOK)

	// 登出只要清除cookie即可
	http.SetCookie(w, &http.Cookie{Name:"username", Value:"",MaxAge:-1,Path:"/"})
	http.SetCookie(w, &http.Cookie{Name:"id", Value:"",MaxAge:-1,Path:"/"})
	http.SetCookie(w, &http.Cookie{Name:"token", Value:"",MaxAge:-1,Path:"/"})
}